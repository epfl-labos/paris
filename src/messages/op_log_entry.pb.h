// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: op_log_entry.proto

#ifndef PROTOBUF_op_5flog_5fentry_2eproto__INCLUDED
#define PROTOBUF_op_5flog_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rpc_messages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_op_5flog_5fentry_2eproto();
void protobuf_AssignDesc_op_5flog_5fentry_2eproto();
void protobuf_ShutdownFile_op_5flog_5fentry_2eproto();

class PbLogRecord;

// ===================================================================

class PbLogRecord : public ::google::protobuf::Message {
 public:
  PbLogRecord();
  virtual ~PbLogRecord();

  PbLogRecord(const PbLogRecord& from);

  inline PbLogRecord& operator=(const PbLogRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLogRecord& default_instance();

  void Swap(PbLogRecord* other);

  // implements Message ----------------------------------------------

  PbLogRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbLogRecord& from);
  void MergeFrom(const PbLogRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // required .PbPhysicalTimeSpec UT = 3;
  inline bool has_ut() const;
  inline void clear_ut();
  static const int kUTFieldNumber = 3;
  inline const ::PbPhysicalTimeSpec& ut() const;
  inline ::PbPhysicalTimeSpec* mutable_ut();
  inline ::PbPhysicalTimeSpec* release_ut();
  inline void set_allocated_ut(::PbPhysicalTimeSpec* ut);

  // optional .PbPhysicalTimeSpec DST = 4;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDSTFieldNumber = 4;
  inline const ::PbPhysicalTimeSpec& dst() const;
  inline ::PbPhysicalTimeSpec* mutable_dst();
  inline ::PbPhysicalTimeSpec* release_dst();
  inline void set_allocated_dst(::PbPhysicalTimeSpec* dst);

  // required int32 SrcReplica = 5;
  inline bool has_srcreplica() const;
  inline void clear_srcreplica();
  static const int kSrcReplicaFieldNumber = 5;
  inline ::google::protobuf::int32 srcreplica() const;
  inline void set_srcreplica(::google::protobuf::int32 value);

  // required int64 LUT = 6;
  inline bool has_lut() const;
  inline void clear_lut();
  static const int kLUTFieldNumber = 6;
  inline ::google::protobuf::int64 lut() const;
  inline void set_lut(::google::protobuf::int64 value);

  // optional .PbPhysicalTimeSpec CreationTime = 7;
  inline bool has_creationtime() const;
  inline void clear_creationtime();
  static const int kCreationTimeFieldNumber = 7;
  inline const ::PbPhysicalTimeSpec& creationtime() const;
  inline ::PbPhysicalTimeSpec* mutable_creationtime();
  inline ::PbPhysicalTimeSpec* release_creationtime();
  inline void set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime);

  // @@protoc_insertion_point(class_scope:PbLogRecord)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_ut();
  inline void clear_has_ut();
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_srcreplica();
  inline void clear_has_srcreplica();
  inline void set_has_lut();
  inline void clear_has_lut();
  inline void set_has_creationtime();
  inline void clear_has_creationtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  ::PbPhysicalTimeSpec* ut_;
  ::PbPhysicalTimeSpec* dst_;
  ::google::protobuf::int64 lut_;
  ::PbPhysicalTimeSpec* creationtime_;
  ::google::protobuf::int32 srcreplica_;
  friend void  protobuf_AddDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_AssignDesc_op_5flog_5fentry_2eproto();
  friend void protobuf_ShutdownFile_op_5flog_5fentry_2eproto();

  void InitAsDefaultInstance();
  static PbLogRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// PbLogRecord

// required bytes Key = 1;
inline bool PbLogRecord::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbLogRecord::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbLogRecord::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbLogRecord::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PbLogRecord::key() const {
  // @@protoc_insertion_point(field_get:PbLogRecord.Key)
  return *key_;
}
inline void PbLogRecord::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogRecord.Key)
}
inline void PbLogRecord::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogRecord.Key)
}
inline void PbLogRecord::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogRecord.Key)
}
inline ::std::string* PbLogRecord::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogRecord.Key)
  return key_;
}
inline ::std::string* PbLogRecord::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogRecord::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogRecord.Key)
}

// required bytes Value = 2;
inline bool PbLogRecord::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbLogRecord::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbLogRecord::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbLogRecord::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PbLogRecord::value() const {
  // @@protoc_insertion_point(field_get:PbLogRecord.Value)
  return *value_;
}
inline void PbLogRecord::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:PbLogRecord.Value)
}
inline void PbLogRecord::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbLogRecord.Value)
}
inline void PbLogRecord::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbLogRecord.Value)
}
inline ::std::string* PbLogRecord::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbLogRecord.Value)
  return value_;
}
inline ::std::string* PbLogRecord::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbLogRecord::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogRecord.Value)
}

// required .PbPhysicalTimeSpec UT = 3;
inline bool PbLogRecord::has_ut() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbLogRecord::set_has_ut() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbLogRecord::clear_has_ut() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbLogRecord::clear_ut() {
  if (ut_ != NULL) ut_->::PbPhysicalTimeSpec::Clear();
  clear_has_ut();
}
inline const ::PbPhysicalTimeSpec& PbLogRecord::ut() const {
  // @@protoc_insertion_point(field_get:PbLogRecord.UT)
  return ut_ != NULL ? *ut_ : *default_instance_->ut_;
}
inline ::PbPhysicalTimeSpec* PbLogRecord::mutable_ut() {
  set_has_ut();
  if (ut_ == NULL) ut_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogRecord.UT)
  return ut_;
}
inline ::PbPhysicalTimeSpec* PbLogRecord::release_ut() {
  clear_has_ut();
  ::PbPhysicalTimeSpec* temp = ut_;
  ut_ = NULL;
  return temp;
}
inline void PbLogRecord::set_allocated_ut(::PbPhysicalTimeSpec* ut) {
  delete ut_;
  ut_ = ut;
  if (ut) {
    set_has_ut();
  } else {
    clear_has_ut();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogRecord.UT)
}

// optional .PbPhysicalTimeSpec DST = 4;
inline bool PbLogRecord::has_dst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbLogRecord::set_has_dst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbLogRecord::clear_has_dst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbLogRecord::clear_dst() {
  if (dst_ != NULL) dst_->::PbPhysicalTimeSpec::Clear();
  clear_has_dst();
}
inline const ::PbPhysicalTimeSpec& PbLogRecord::dst() const {
  // @@protoc_insertion_point(field_get:PbLogRecord.DST)
  return dst_ != NULL ? *dst_ : *default_instance_->dst_;
}
inline ::PbPhysicalTimeSpec* PbLogRecord::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) dst_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogRecord.DST)
  return dst_;
}
inline ::PbPhysicalTimeSpec* PbLogRecord::release_dst() {
  clear_has_dst();
  ::PbPhysicalTimeSpec* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline void PbLogRecord::set_allocated_dst(::PbPhysicalTimeSpec* dst) {
  delete dst_;
  dst_ = dst;
  if (dst) {
    set_has_dst();
  } else {
    clear_has_dst();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogRecord.DST)
}

// required int32 SrcReplica = 5;
inline bool PbLogRecord::has_srcreplica() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbLogRecord::set_has_srcreplica() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbLogRecord::clear_has_srcreplica() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbLogRecord::clear_srcreplica() {
  srcreplica_ = 0;
  clear_has_srcreplica();
}
inline ::google::protobuf::int32 PbLogRecord::srcreplica() const {
  // @@protoc_insertion_point(field_get:PbLogRecord.SrcReplica)
  return srcreplica_;
}
inline void PbLogRecord::set_srcreplica(::google::protobuf::int32 value) {
  set_has_srcreplica();
  srcreplica_ = value;
  // @@protoc_insertion_point(field_set:PbLogRecord.SrcReplica)
}

// required int64 LUT = 6;
inline bool PbLogRecord::has_lut() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbLogRecord::set_has_lut() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbLogRecord::clear_has_lut() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbLogRecord::clear_lut() {
  lut_ = GOOGLE_LONGLONG(0);
  clear_has_lut();
}
inline ::google::protobuf::int64 PbLogRecord::lut() const {
  // @@protoc_insertion_point(field_get:PbLogRecord.LUT)
  return lut_;
}
inline void PbLogRecord::set_lut(::google::protobuf::int64 value) {
  set_has_lut();
  lut_ = value;
  // @@protoc_insertion_point(field_set:PbLogRecord.LUT)
}

// optional .PbPhysicalTimeSpec CreationTime = 7;
inline bool PbLogRecord::has_creationtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbLogRecord::set_has_creationtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbLogRecord::clear_has_creationtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbLogRecord::clear_creationtime() {
  if (creationtime_ != NULL) creationtime_->::PbPhysicalTimeSpec::Clear();
  clear_has_creationtime();
}
inline const ::PbPhysicalTimeSpec& PbLogRecord::creationtime() const {
  // @@protoc_insertion_point(field_get:PbLogRecord.CreationTime)
  return creationtime_ != NULL ? *creationtime_ : *default_instance_->creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogRecord::mutable_creationtime() {
  set_has_creationtime();
  if (creationtime_ == NULL) creationtime_ = new ::PbPhysicalTimeSpec;
  // @@protoc_insertion_point(field_mutable:PbLogRecord.CreationTime)
  return creationtime_;
}
inline ::PbPhysicalTimeSpec* PbLogRecord::release_creationtime() {
  clear_has_creationtime();
  ::PbPhysicalTimeSpec* temp = creationtime_;
  creationtime_ = NULL;
  return temp;
}
inline void PbLogRecord::set_allocated_creationtime(::PbPhysicalTimeSpec* creationtime) {
  delete creationtime_;
  creationtime_ = creationtime;
  if (creationtime) {
    set_has_creationtime();
  } else {
    clear_has_creationtime();
  }
  // @@protoc_insertion_point(field_set_allocated:PbLogRecord.CreationTime)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_op_5flog_5fentry_2eproto__INCLUDED
