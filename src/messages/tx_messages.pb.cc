// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tx_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tx_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PbRpcTxPublicGetServerConfigResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcTxPublicGetServerConfigResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPublicStartArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPublicStartArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPublicStartResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPublicStartResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPublicReadArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPublicReadArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPublicReadResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPublicReadResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPublicCommitArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPublicCommitArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPublicCommitResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPublicCommitResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPublicGetRemotePartitionsIdsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPublicGetRemotePartitionsIdsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcInternalTxSliceReadKeysArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcInternalTxSliceReadKeysArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcInternalTxSliceReadKeysResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcInternalTxSliceReadKeysResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPrepareRequestArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPrepareRequestArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcPrepareRequestResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcPrepareRequestResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcInternalPrepareReplyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcInternalPrepareReplyResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcGST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcGST_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcLST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcLST_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbRpcGSTandUST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRpcGSTandUST_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tx_5fmessages_2eproto() {
  protobuf_AddDesc_tx_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tx_messages.proto");
  GOOGLE_CHECK(file != NULL);
  PbRpcTxPublicGetServerConfigResult_descriptor_ = file->message_type(0);
  static const int PbRpcTxPublicGetServerConfigResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, numpartitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, numdatacenters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, partitionreplicationfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, replicaid_),
  };
  PbRpcTxPublicGetServerConfigResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcTxPublicGetServerConfigResult_descriptor_,
      PbRpcTxPublicGetServerConfigResult::default_instance_,
      PbRpcTxPublicGetServerConfigResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcTxPublicGetServerConfigResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcTxPublicGetServerConfigResult));
  PbRpcPublicStartArg_descriptor_ = file->message_type(1);
  static const int PbRpcPublicStartArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartArg, ust_),
  };
  PbRpcPublicStartArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPublicStartArg_descriptor_,
      PbRpcPublicStartArg::default_instance_,
      PbRpcPublicStartArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPublicStartArg));
  PbRpcPublicStartResult_descriptor_ = file->message_type(2);
  static const int PbRpcPublicStartResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartResult, ust_),
  };
  PbRpcPublicStartResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPublicStartResult_descriptor_,
      PbRpcPublicStartResult::default_instance_,
      PbRpcPublicStartResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicStartResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPublicStartResult));
  PbRpcPublicReadArg_descriptor_ = file->message_type(3);
  static const int PbRpcPublicReadArg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadArg, notxid_),
  };
  PbRpcPublicReadArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPublicReadArg_descriptor_,
      PbRpcPublicReadArg::default_instance_,
      PbRpcPublicReadArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPublicReadArg));
  PbRpcPublicReadResult_descriptor_ = file->message_type(4);
  static const int PbRpcPublicReadResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadResult, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadResult, id_),
  };
  PbRpcPublicReadResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPublicReadResult_descriptor_,
      PbRpcPublicReadResult::default_instance_,
      PbRpcPublicReadResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicReadResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPublicReadResult));
  PbRpcPublicCommitArg_descriptor_ = file->message_type(5);
  static const int PbRpcPublicCommitArg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitArg, lct_),
  };
  PbRpcPublicCommitArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPublicCommitArg_descriptor_,
      PbRpcPublicCommitArg::default_instance_,
      PbRpcPublicCommitArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPublicCommitArg));
  PbRpcPublicCommitResult_descriptor_ = file->message_type(6);
  static const int PbRpcPublicCommitResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitResult, ct_),
  };
  PbRpcPublicCommitResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPublicCommitResult_descriptor_,
      PbRpcPublicCommitResult::default_instance_,
      PbRpcPublicCommitResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicCommitResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPublicCommitResult));
  PbRpcPublicGetRemotePartitionsIdsResult_descriptor_ = file->message_type(7);
  static const int PbRpcPublicGetRemotePartitionsIdsResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicGetRemotePartitionsIdsResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicGetRemotePartitionsIdsResult, pids_),
  };
  PbRpcPublicGetRemotePartitionsIdsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPublicGetRemotePartitionsIdsResult_descriptor_,
      PbRpcPublicGetRemotePartitionsIdsResult::default_instance_,
      PbRpcPublicGetRemotePartitionsIdsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicGetRemotePartitionsIdsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPublicGetRemotePartitionsIdsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPublicGetRemotePartitionsIdsResult));
  PbRpcInternalTxSliceReadKeysArg_descriptor_ = file->message_type(8);
  static const int PbRpcInternalTxSliceReadKeysArg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysArg, ust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysArg, srcpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysArg, srcdatacenter_),
  };
  PbRpcInternalTxSliceReadKeysArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcInternalTxSliceReadKeysArg_descriptor_,
      PbRpcInternalTxSliceReadKeysArg::default_instance_,
      PbRpcInternalTxSliceReadKeysArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcInternalTxSliceReadKeysArg));
  PbRpcInternalTxSliceReadKeysResult_descriptor_ = file->message_type(9);
  static const int PbRpcInternalTxSliceReadKeysResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, succeeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, srcpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, srcdatacenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, waitedxact_),
  };
  PbRpcInternalTxSliceReadKeysResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcInternalTxSliceReadKeysResult_descriptor_,
      PbRpcInternalTxSliceReadKeysResult::default_instance_,
      PbRpcInternalTxSliceReadKeysResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalTxSliceReadKeysResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcInternalTxSliceReadKeysResult));
  PbRpcPrepareRequestArg_descriptor_ = file->message_type(10);
  static const int PbRpcPrepareRequestArg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, ust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, ht_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, srcpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, srcdatacenter_),
  };
  PbRpcPrepareRequestArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPrepareRequestArg_descriptor_,
      PbRpcPrepareRequestArg::default_instance_,
      PbRpcPrepareRequestArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPrepareRequestArg));
  PbRpcPrepareRequestResult_descriptor_ = file->message_type(11);
  static const int PbRpcPrepareRequestResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestResult, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestResult, srcpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestResult, srcdatacenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestResult, blockduration_),
  };
  PbRpcPrepareRequestResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcPrepareRequestResult_descriptor_,
      PbRpcPrepareRequestResult::default_instance_,
      PbRpcPrepareRequestResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcPrepareRequestResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcPrepareRequestResult));
  PbRpcInternalPrepareReplyResult_descriptor_ = file->message_type(12);
  static const int PbRpcInternalPrepareReplyResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalPrepareReplyResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalPrepareReplyResult, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalPrepareReplyResult, srcpartition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalPrepareReplyResult, srcdatacenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalPrepareReplyResult, blockduration_),
  };
  PbRpcInternalPrepareReplyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcInternalPrepareReplyResult_descriptor_,
      PbRpcInternalPrepareReplyResult::default_instance_,
      PbRpcInternalPrepareReplyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalPrepareReplyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcInternalPrepareReplyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcInternalPrepareReplyResult));
  PbRpcGST_descriptor_ = file->message_type(13);
  static const int PbRpcGST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGST, gst_),
  };
  PbRpcGST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcGST_descriptor_,
      PbRpcGST::default_instance_,
      PbRpcGST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcGST));
  PbRpcLST_descriptor_ = file->message_type(14);
  static const int PbRpcLST_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, lst_),
  };
  PbRpcLST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcLST_descriptor_,
      PbRpcLST::default_instance_,
      PbRpcLST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcLST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcLST));
  PbRpcGSTandUST_descriptor_ = file->message_type(15);
  static const int PbRpcGSTandUST_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTandUST, gst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTandUST, ust_),
  };
  PbRpcGSTandUST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRpcGSTandUST_descriptor_,
      PbRpcGSTandUST::default_instance_,
      PbRpcGSTandUST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTandUST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRpcGSTandUST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRpcGSTandUST));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tx_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcTxPublicGetServerConfigResult_descriptor_, &PbRpcTxPublicGetServerConfigResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPublicStartArg_descriptor_, &PbRpcPublicStartArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPublicStartResult_descriptor_, &PbRpcPublicStartResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPublicReadArg_descriptor_, &PbRpcPublicReadArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPublicReadResult_descriptor_, &PbRpcPublicReadResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPublicCommitArg_descriptor_, &PbRpcPublicCommitArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPublicCommitResult_descriptor_, &PbRpcPublicCommitResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPublicGetRemotePartitionsIdsResult_descriptor_, &PbRpcPublicGetRemotePartitionsIdsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcInternalTxSliceReadKeysArg_descriptor_, &PbRpcInternalTxSliceReadKeysArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcInternalTxSliceReadKeysResult_descriptor_, &PbRpcInternalTxSliceReadKeysResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPrepareRequestArg_descriptor_, &PbRpcPrepareRequestArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcPrepareRequestResult_descriptor_, &PbRpcPrepareRequestResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcInternalPrepareReplyResult_descriptor_, &PbRpcInternalPrepareReplyResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcGST_descriptor_, &PbRpcGST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcLST_descriptor_, &PbRpcLST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRpcGSTandUST_descriptor_, &PbRpcGSTandUST::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tx_5fmessages_2eproto() {
  delete PbRpcTxPublicGetServerConfigResult::default_instance_;
  delete PbRpcTxPublicGetServerConfigResult_reflection_;
  delete PbRpcPublicStartArg::default_instance_;
  delete PbRpcPublicStartArg_reflection_;
  delete PbRpcPublicStartResult::default_instance_;
  delete PbRpcPublicStartResult_reflection_;
  delete PbRpcPublicReadArg::default_instance_;
  delete PbRpcPublicReadArg_reflection_;
  delete PbRpcPublicReadResult::default_instance_;
  delete PbRpcPublicReadResult_reflection_;
  delete PbRpcPublicCommitArg::default_instance_;
  delete PbRpcPublicCommitArg_reflection_;
  delete PbRpcPublicCommitResult::default_instance_;
  delete PbRpcPublicCommitResult_reflection_;
  delete PbRpcPublicGetRemotePartitionsIdsResult::default_instance_;
  delete PbRpcPublicGetRemotePartitionsIdsResult_reflection_;
  delete PbRpcInternalTxSliceReadKeysArg::default_instance_;
  delete PbRpcInternalTxSliceReadKeysArg_reflection_;
  delete PbRpcInternalTxSliceReadKeysResult::default_instance_;
  delete PbRpcInternalTxSliceReadKeysResult_reflection_;
  delete PbRpcPrepareRequestArg::default_instance_;
  delete PbRpcPrepareRequestArg_reflection_;
  delete PbRpcPrepareRequestResult::default_instance_;
  delete PbRpcPrepareRequestResult_reflection_;
  delete PbRpcInternalPrepareReplyResult::default_instance_;
  delete PbRpcInternalPrepareReplyResult_reflection_;
  delete PbRpcGST::default_instance_;
  delete PbRpcGST_reflection_;
  delete PbRpcLST::default_instance_;
  delete PbRpcLST_reflection_;
  delete PbRpcGSTandUST::default_instance_;
  delete PbRpcGSTandUST_reflection_;
}

void protobuf_AddDesc_tx_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_rpc_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021tx_messages.proto\032\022rpc_messages.proto\""
    "\235\001\n\"PbRpcTxPublicGetServerConfigResult\022\021"
    "\n\tSucceeded\030\001 \002(\010\022\025\n\rNumPartitions\030\002 \002(\005"
    "\022\026\n\016NumDataCenters\030\003 \002(\005\022\"\n\032PartitionRep"
    "licationFactor\030\004 \002(\005\022\021\n\treplicaId\030\005 \002(\005\""
    "7\n\023PbRpcPublicStartArg\022 \n\003UST\030\001 \001(\0132\023.Pb"
    "PhysicalTimeSpec\"Y\n\026PbRpcPublicStartResu"
    "lt\022\021\n\tSucceeded\030\001 \002(\010\022\n\n\002ID\030\002 \002(\003\022 \n\003UST"
    "\030\003 \001(\0132\023.PbPhysicalTimeSpec\"=\n\022PbRpcPubl"
    "icReadArg\022\n\n\002ID\030\001 \001(\003\022\013\n\003Key\030\002 \003(\014\022\016\n\006no"
    "TxId\030\003 \001(\010\"E\n\025PbRpcPublicReadResult\022\021\n\tS"
    "ucceeded\030\001 \002(\010\022\r\n\005Value\030\002 \003(\014\022\n\n\002ID\030\003 \001("
    "\003\"`\n\024PbRpcPublicCommitArg\022\n\n\002ID\030\001 \002(\003\022\013\n"
    "\003Key\030\002 \003(\014\022\r\n\005Value\030\003 \003(\014\022 \n\003LCT\030\004 \001(\0132\023"
    ".PbPhysicalTimeSpec\"M\n\027PbRpcPublicCommit"
    "Result\022\021\n\tSucceeded\030\001 \002(\010\022\037\n\002CT\030\002 \002(\0132\023."
    "PbPhysicalTimeSpec\"J\n\'PbRpcPublicGetRemo"
    "tePartitionsIdsResult\022\021\n\tSucceeded\030\001 \002(\010"
    "\022\014\n\004pids\030\002 \003(\003\"\211\001\n\037PbRpcInternalTxSliceR"
    "eadKeysArg\022\013\n\003Key\030\001 \003(\014\022 \n\003UST\030\002 \001(\0132\023.P"
    "bPhysicalTimeSpec\022\n\n\002id\030\003 \001(\003\022\024\n\014srcPart"
    "ition\030\004 \001(\003\022\025\n\rsrcDataCenter\030\005 \001(\003\"\223\001\n\"P"
    "bRpcInternalTxSliceReadKeysResult\022\021\n\tSuc"
    "ceeded\030\001 \002(\010\022\r\n\005Value\030\002 \003(\014\022\024\n\014SrcPartit"
    "ion\030\003 \001(\005\022\025\n\rSrcDataCenter\030\004 \001(\005\022\n\n\002id\030\005"
    " \001(\003\022\022\n\nwaitedXact\030\006 \001(\001\"\260\001\n\026PbRpcPrepar"
    "eRequestArg\022\n\n\002id\030\001 \002(\003\022 \n\003UST\030\002 \001(\0132\023.P"
    "bPhysicalTimeSpec\022\037\n\002HT\030\003 \002(\0132\023.PbPhysic"
    "alTimeSpec\022\013\n\003Key\030\004 \003(\014\022\r\n\005Value\030\005 \003(\014\022\024"
    "\n\014SrcPartition\030\006 \002(\003\022\025\n\rSrcDataCenter\030\007 "
    "\002(\003\"\214\001\n\031PbRpcPrepareRequestResult\022\n\n\002id\030"
    "\001 \002(\003\022\037\n\002PT\030\002 \002(\0132\023.PbPhysicalTimeSpec\022\024"
    "\n\014srcPartition\030\003 \002(\003\022\025\n\rsrcDataCenter\030\004 "
    "\002(\003\022\025\n\rblockDuration\030\005 \001(\001\"\222\001\n\037PbRpcInte"
    "rnalPrepareReplyResult\022\n\n\002id\030\001 \002(\003\022\037\n\002PT"
    "\030\002 \002(\0132\023.PbPhysicalTimeSpec\022\024\n\014srcPartit"
    "ion\030\003 \002(\003\022\025\n\rsrcDataCenter\030\004 \002(\003\022\025\n\rbloc"
    "kDuration\030\005 \001(\001\",\n\010PbRpcGST\022 \n\003GST\030\001 \002(\013"
    "2\023.PbPhysicalTimeSpec\";\n\010PbRpcLST\022\r\n\005Rou"
    "nd\030\001 \002(\005\022 \n\003LST\030\002 \002(\0132\023.PbPhysicalTimeSp"
    "ec\"T\n\016PbRpcGSTandUST\022 \n\003GST\030\001 \002(\0132\023.PbPh"
    "ysicalTimeSpec\022 \n\003UST\030\002 \002(\0132\023.PbPhysical"
    "TimeSpec", 1688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tx_messages.proto", &protobuf_RegisterTypes);
  PbRpcTxPublicGetServerConfigResult::default_instance_ = new PbRpcTxPublicGetServerConfigResult();
  PbRpcPublicStartArg::default_instance_ = new PbRpcPublicStartArg();
  PbRpcPublicStartResult::default_instance_ = new PbRpcPublicStartResult();
  PbRpcPublicReadArg::default_instance_ = new PbRpcPublicReadArg();
  PbRpcPublicReadResult::default_instance_ = new PbRpcPublicReadResult();
  PbRpcPublicCommitArg::default_instance_ = new PbRpcPublicCommitArg();
  PbRpcPublicCommitResult::default_instance_ = new PbRpcPublicCommitResult();
  PbRpcPublicGetRemotePartitionsIdsResult::default_instance_ = new PbRpcPublicGetRemotePartitionsIdsResult();
  PbRpcInternalTxSliceReadKeysArg::default_instance_ = new PbRpcInternalTxSliceReadKeysArg();
  PbRpcInternalTxSliceReadKeysResult::default_instance_ = new PbRpcInternalTxSliceReadKeysResult();
  PbRpcPrepareRequestArg::default_instance_ = new PbRpcPrepareRequestArg();
  PbRpcPrepareRequestResult::default_instance_ = new PbRpcPrepareRequestResult();
  PbRpcInternalPrepareReplyResult::default_instance_ = new PbRpcInternalPrepareReplyResult();
  PbRpcGST::default_instance_ = new PbRpcGST();
  PbRpcLST::default_instance_ = new PbRpcLST();
  PbRpcGSTandUST::default_instance_ = new PbRpcGSTandUST();
  PbRpcTxPublicGetServerConfigResult::default_instance_->InitAsDefaultInstance();
  PbRpcPublicStartArg::default_instance_->InitAsDefaultInstance();
  PbRpcPublicStartResult::default_instance_->InitAsDefaultInstance();
  PbRpcPublicReadArg::default_instance_->InitAsDefaultInstance();
  PbRpcPublicReadResult::default_instance_->InitAsDefaultInstance();
  PbRpcPublicCommitArg::default_instance_->InitAsDefaultInstance();
  PbRpcPublicCommitResult::default_instance_->InitAsDefaultInstance();
  PbRpcPublicGetRemotePartitionsIdsResult::default_instance_->InitAsDefaultInstance();
  PbRpcInternalTxSliceReadKeysArg::default_instance_->InitAsDefaultInstance();
  PbRpcInternalTxSliceReadKeysResult::default_instance_->InitAsDefaultInstance();
  PbRpcPrepareRequestArg::default_instance_->InitAsDefaultInstance();
  PbRpcPrepareRequestResult::default_instance_->InitAsDefaultInstance();
  PbRpcInternalPrepareReplyResult::default_instance_->InitAsDefaultInstance();
  PbRpcGST::default_instance_->InitAsDefaultInstance();
  PbRpcLST::default_instance_->InitAsDefaultInstance();
  PbRpcGSTandUST::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tx_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tx_5fmessages_2eproto {
  StaticDescriptorInitializer_tx_5fmessages_2eproto() {
    protobuf_AddDesc_tx_5fmessages_2eproto();
  }
} static_descriptor_initializer_tx_5fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PbRpcTxPublicGetServerConfigResult::kSucceededFieldNumber;
const int PbRpcTxPublicGetServerConfigResult::kNumPartitionsFieldNumber;
const int PbRpcTxPublicGetServerConfigResult::kNumDataCentersFieldNumber;
const int PbRpcTxPublicGetServerConfigResult::kPartitionReplicationFactorFieldNumber;
const int PbRpcTxPublicGetServerConfigResult::kReplicaIdFieldNumber;
#endif  // !_MSC_VER

PbRpcTxPublicGetServerConfigResult::PbRpcTxPublicGetServerConfigResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcTxPublicGetServerConfigResult)
}

void PbRpcTxPublicGetServerConfigResult::InitAsDefaultInstance() {
}

PbRpcTxPublicGetServerConfigResult::PbRpcTxPublicGetServerConfigResult(const PbRpcTxPublicGetServerConfigResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcTxPublicGetServerConfigResult)
}

void PbRpcTxPublicGetServerConfigResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  numpartitions_ = 0;
  numdatacenters_ = 0;
  partitionreplicationfactor_ = 0;
  replicaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcTxPublicGetServerConfigResult::~PbRpcTxPublicGetServerConfigResult() {
  // @@protoc_insertion_point(destructor:PbRpcTxPublicGetServerConfigResult)
  SharedDtor();
}

void PbRpcTxPublicGetServerConfigResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcTxPublicGetServerConfigResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcTxPublicGetServerConfigResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcTxPublicGetServerConfigResult_descriptor_;
}

const PbRpcTxPublicGetServerConfigResult& PbRpcTxPublicGetServerConfigResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcTxPublicGetServerConfigResult* PbRpcTxPublicGetServerConfigResult::default_instance_ = NULL;

PbRpcTxPublicGetServerConfigResult* PbRpcTxPublicGetServerConfigResult::New() const {
  return new PbRpcTxPublicGetServerConfigResult;
}

void PbRpcTxPublicGetServerConfigResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcTxPublicGetServerConfigResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(succeeded_, replicaid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcTxPublicGetServerConfigResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcTxPublicGetServerConfigResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NumPartitions;
        break;
      }

      // required int32 NumPartitions = 2;
      case 2: {
        if (tag == 16) {
         parse_NumPartitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numpartitions_)));
          set_has_numpartitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NumDataCenters;
        break;
      }

      // required int32 NumDataCenters = 3;
      case 3: {
        if (tag == 24) {
         parse_NumDataCenters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numdatacenters_)));
          set_has_numdatacenters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PartitionReplicationFactor;
        break;
      }

      // required int32 PartitionReplicationFactor = 4;
      case 4: {
        if (tag == 32) {
         parse_PartitionReplicationFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionreplicationfactor_)));
          set_has_partitionreplicationfactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_replicaId;
        break;
      }

      // required int32 replicaId = 5;
      case 5: {
        if (tag == 40) {
         parse_replicaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicaid_)));
          set_has_replicaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcTxPublicGetServerConfigResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcTxPublicGetServerConfigResult)
  return false;
#undef DO_
}

void PbRpcTxPublicGetServerConfigResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcTxPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numpartitions(), output);
  }

  // required int32 NumDataCenters = 3;
  if (has_numdatacenters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numdatacenters(), output);
  }

  // required int32 PartitionReplicationFactor = 4;
  if (has_partitionreplicationfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->partitionreplicationfactor(), output);
  }

  // required int32 replicaId = 5;
  if (has_replicaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->replicaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcTxPublicGetServerConfigResult)
}

::google::protobuf::uint8* PbRpcTxPublicGetServerConfigResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcTxPublicGetServerConfigResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required int32 NumPartitions = 2;
  if (has_numpartitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numpartitions(), target);
  }

  // required int32 NumDataCenters = 3;
  if (has_numdatacenters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numdatacenters(), target);
  }

  // required int32 PartitionReplicationFactor = 4;
  if (has_partitionreplicationfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->partitionreplicationfactor(), target);
  }

  // required int32 replicaId = 5;
  if (has_replicaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->replicaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcTxPublicGetServerConfigResult)
  return target;
}

int PbRpcTxPublicGetServerConfigResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required int32 NumPartitions = 2;
    if (has_numpartitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numpartitions());
    }

    // required int32 NumDataCenters = 3;
    if (has_numdatacenters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numdatacenters());
    }

    // required int32 PartitionReplicationFactor = 4;
    if (has_partitionreplicationfactor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partitionreplicationfactor());
    }

    // required int32 replicaId = 5;
    if (has_replicaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcTxPublicGetServerConfigResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcTxPublicGetServerConfigResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcTxPublicGetServerConfigResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcTxPublicGetServerConfigResult::MergeFrom(const PbRpcTxPublicGetServerConfigResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_numpartitions()) {
      set_numpartitions(from.numpartitions());
    }
    if (from.has_numdatacenters()) {
      set_numdatacenters(from.numdatacenters());
    }
    if (from.has_partitionreplicationfactor()) {
      set_partitionreplicationfactor(from.partitionreplicationfactor());
    }
    if (from.has_replicaid()) {
      set_replicaid(from.replicaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcTxPublicGetServerConfigResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcTxPublicGetServerConfigResult::CopyFrom(const PbRpcTxPublicGetServerConfigResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcTxPublicGetServerConfigResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PbRpcTxPublicGetServerConfigResult::Swap(PbRpcTxPublicGetServerConfigResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(numpartitions_, other->numpartitions_);
    std::swap(numdatacenters_, other->numdatacenters_);
    std::swap(partitionreplicationfactor_, other->partitionreplicationfactor_);
    std::swap(replicaid_, other->replicaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcTxPublicGetServerConfigResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcTxPublicGetServerConfigResult_descriptor_;
  metadata.reflection = PbRpcTxPublicGetServerConfigResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPublicStartArg::kUSTFieldNumber;
#endif  // !_MSC_VER

PbRpcPublicStartArg::PbRpcPublicStartArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPublicStartArg)
}

void PbRpcPublicStartArg::InitAsDefaultInstance() {
  ust_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPublicStartArg::PbRpcPublicStartArg(const PbRpcPublicStartArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPublicStartArg)
}

void PbRpcPublicStartArg::SharedCtor() {
  _cached_size_ = 0;
  ust_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPublicStartArg::~PbRpcPublicStartArg() {
  // @@protoc_insertion_point(destructor:PbRpcPublicStartArg)
  SharedDtor();
}

void PbRpcPublicStartArg::SharedDtor() {
  if (this != default_instance_) {
    delete ust_;
  }
}

void PbRpcPublicStartArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPublicStartArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPublicStartArg_descriptor_;
}

const PbRpcPublicStartArg& PbRpcPublicStartArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPublicStartArg* PbRpcPublicStartArg::default_instance_ = NULL;

PbRpcPublicStartArg* PbRpcPublicStartArg::New() const {
  return new PbRpcPublicStartArg;
}

void PbRpcPublicStartArg::Clear() {
  if (has_ust()) {
    if (ust_ != NULL) ust_->::PbPhysicalTimeSpec::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPublicStartArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPublicStartArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PbPhysicalTimeSpec UST = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPublicStartArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPublicStartArg)
  return false;
#undef DO_
}

void PbRpcPublicStartArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPublicStartArg)
  // optional .PbPhysicalTimeSpec UST = 1;
  if (has_ust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPublicStartArg)
}

::google::protobuf::uint8* PbRpcPublicStartArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPublicStartArg)
  // optional .PbPhysicalTimeSpec UST = 1;
  if (has_ust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPublicStartArg)
  return target;
}

int PbRpcPublicStartArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PbPhysicalTimeSpec UST = 1;
    if (has_ust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ust());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPublicStartArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPublicStartArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPublicStartArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPublicStartArg::MergeFrom(const PbRpcPublicStartArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ust()) {
      mutable_ust()->::PbPhysicalTimeSpec::MergeFrom(from.ust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPublicStartArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPublicStartArg::CopyFrom(const PbRpcPublicStartArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPublicStartArg::IsInitialized() const {

  if (has_ust()) {
    if (!this->ust().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPublicStartArg::Swap(PbRpcPublicStartArg* other) {
  if (other != this) {
    std::swap(ust_, other->ust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPublicStartArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPublicStartArg_descriptor_;
  metadata.reflection = PbRpcPublicStartArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPublicStartResult::kSucceededFieldNumber;
const int PbRpcPublicStartResult::kIDFieldNumber;
const int PbRpcPublicStartResult::kUSTFieldNumber;
#endif  // !_MSC_VER

PbRpcPublicStartResult::PbRpcPublicStartResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPublicStartResult)
}

void PbRpcPublicStartResult::InitAsDefaultInstance() {
  ust_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPublicStartResult::PbRpcPublicStartResult(const PbRpcPublicStartResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPublicStartResult)
}

void PbRpcPublicStartResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  id_ = GOOGLE_LONGLONG(0);
  ust_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPublicStartResult::~PbRpcPublicStartResult() {
  // @@protoc_insertion_point(destructor:PbRpcPublicStartResult)
  SharedDtor();
}

void PbRpcPublicStartResult::SharedDtor() {
  if (this != default_instance_) {
    delete ust_;
  }
}

void PbRpcPublicStartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPublicStartResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPublicStartResult_descriptor_;
}

const PbRpcPublicStartResult& PbRpcPublicStartResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPublicStartResult* PbRpcPublicStartResult::default_instance_ = NULL;

PbRpcPublicStartResult* PbRpcPublicStartResult::New() const {
  return new PbRpcPublicStartResult;
}

void PbRpcPublicStartResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    succeeded_ = false;
    id_ = GOOGLE_LONGLONG(0);
    if (has_ust()) {
      if (ust_ != NULL) ust_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPublicStartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPublicStartResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required int64 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UST;
        break;
      }

      // optional .PbPhysicalTimeSpec UST = 3;
      case 3: {
        if (tag == 26) {
         parse_UST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPublicStartResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPublicStartResult)
  return false;
#undef DO_
}

void PbRpcPublicStartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPublicStartResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required int64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional .PbPhysicalTimeSpec UST = 3;
  if (has_ust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPublicStartResult)
}

::google::protobuf::uint8* PbRpcPublicStartResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPublicStartResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required int64 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional .PbPhysicalTimeSpec UST = 3;
  if (has_ust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPublicStartResult)
  return target;
}

int PbRpcPublicStartResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required int64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .PbPhysicalTimeSpec UST = 3;
    if (has_ust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ust());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPublicStartResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPublicStartResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPublicStartResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPublicStartResult::MergeFrom(const PbRpcPublicStartResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ust()) {
      mutable_ust()->::PbPhysicalTimeSpec::MergeFrom(from.ust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPublicStartResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPublicStartResult::CopyFrom(const PbRpcPublicStartResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPublicStartResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ust()) {
    if (!this->ust().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPublicStartResult::Swap(PbRpcPublicStartResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(id_, other->id_);
    std::swap(ust_, other->ust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPublicStartResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPublicStartResult_descriptor_;
  metadata.reflection = PbRpcPublicStartResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPublicReadArg::kIDFieldNumber;
const int PbRpcPublicReadArg::kKeyFieldNumber;
const int PbRpcPublicReadArg::kNoTxIdFieldNumber;
#endif  // !_MSC_VER

PbRpcPublicReadArg::PbRpcPublicReadArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPublicReadArg)
}

void PbRpcPublicReadArg::InitAsDefaultInstance() {
}

PbRpcPublicReadArg::PbRpcPublicReadArg(const PbRpcPublicReadArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPublicReadArg)
}

void PbRpcPublicReadArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  notxid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPublicReadArg::~PbRpcPublicReadArg() {
  // @@protoc_insertion_point(destructor:PbRpcPublicReadArg)
  SharedDtor();
}

void PbRpcPublicReadArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcPublicReadArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPublicReadArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPublicReadArg_descriptor_;
}

const PbRpcPublicReadArg& PbRpcPublicReadArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPublicReadArg* PbRpcPublicReadArg::default_instance_ = NULL;

PbRpcPublicReadArg* PbRpcPublicReadArg::New() const {
  return new PbRpcPublicReadArg;
}

void PbRpcPublicReadArg::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    id_ = GOOGLE_LONGLONG(0);
    notxid_ = false;
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPublicReadArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPublicReadArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        if (input->ExpectTag(24)) goto parse_noTxId;
        break;
      }

      // optional bool noTxId = 3;
      case 3: {
        if (tag == 24) {
         parse_noTxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notxid_)));
          set_has_notxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPublicReadArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPublicReadArg)
  return false;
#undef DO_
}

void PbRpcPublicReadArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPublicReadArg)
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  // optional bool noTxId = 3;
  if (has_notxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->notxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPublicReadArg)
}

::google::protobuf::uint8* PbRpcPublicReadArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPublicReadArg)
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  // optional bool noTxId = 3;
  if (has_notxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->notxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPublicReadArg)
  return target;
}

int PbRpcPublicReadArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bool noTxId = 3;
    if (has_notxid()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes Key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPublicReadArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPublicReadArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPublicReadArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPublicReadArg::MergeFrom(const PbRpcPublicReadArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_notxid()) {
      set_notxid(from.notxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPublicReadArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPublicReadArg::CopyFrom(const PbRpcPublicReadArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPublicReadArg::IsInitialized() const {

  return true;
}

void PbRpcPublicReadArg::Swap(PbRpcPublicReadArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    std::swap(notxid_, other->notxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPublicReadArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPublicReadArg_descriptor_;
  metadata.reflection = PbRpcPublicReadArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPublicReadResult::kSucceededFieldNumber;
const int PbRpcPublicReadResult::kValueFieldNumber;
const int PbRpcPublicReadResult::kIDFieldNumber;
#endif  // !_MSC_VER

PbRpcPublicReadResult::PbRpcPublicReadResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPublicReadResult)
}

void PbRpcPublicReadResult::InitAsDefaultInstance() {
}

PbRpcPublicReadResult::PbRpcPublicReadResult(const PbRpcPublicReadResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPublicReadResult)
}

void PbRpcPublicReadResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPublicReadResult::~PbRpcPublicReadResult() {
  // @@protoc_insertion_point(destructor:PbRpcPublicReadResult)
  SharedDtor();
}

void PbRpcPublicReadResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcPublicReadResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPublicReadResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPublicReadResult_descriptor_;
}

const PbRpcPublicReadResult& PbRpcPublicReadResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPublicReadResult* PbRpcPublicReadResult::default_instance_ = NULL;

PbRpcPublicReadResult* PbRpcPublicReadResult::New() const {
  return new PbRpcPublicReadResult;
}

void PbRpcPublicReadResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcPublicReadResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, succeeded_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPublicReadResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPublicReadResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        if (input->ExpectTag(24)) goto parse_ID;
        break;
      }

      // optional int64 ID = 3;
      case 3: {
        if (tag == 24) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPublicReadResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPublicReadResult)
  return false;
#undef DO_
}

void PbRpcPublicReadResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPublicReadResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }

  // optional int64 ID = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPublicReadResult)
}

::google::protobuf::uint8* PbRpcPublicReadResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPublicReadResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }

  // optional int64 ID = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPublicReadResult)
  return target;
}

int PbRpcPublicReadResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional int64 ID = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated bytes Value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPublicReadResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPublicReadResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPublicReadResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPublicReadResult::MergeFrom(const PbRpcPublicReadResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPublicReadResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPublicReadResult::CopyFrom(const PbRpcPublicReadResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPublicReadResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcPublicReadResult::Swap(PbRpcPublicReadResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    value_.Swap(&other->value_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPublicReadResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPublicReadResult_descriptor_;
  metadata.reflection = PbRpcPublicReadResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPublicCommitArg::kIDFieldNumber;
const int PbRpcPublicCommitArg::kKeyFieldNumber;
const int PbRpcPublicCommitArg::kValueFieldNumber;
const int PbRpcPublicCommitArg::kLCTFieldNumber;
#endif  // !_MSC_VER

PbRpcPublicCommitArg::PbRpcPublicCommitArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPublicCommitArg)
}

void PbRpcPublicCommitArg::InitAsDefaultInstance() {
  lct_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPublicCommitArg::PbRpcPublicCommitArg(const PbRpcPublicCommitArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPublicCommitArg)
}

void PbRpcPublicCommitArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  lct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPublicCommitArg::~PbRpcPublicCommitArg() {
  // @@protoc_insertion_point(destructor:PbRpcPublicCommitArg)
  SharedDtor();
}

void PbRpcPublicCommitArg::SharedDtor() {
  if (this != default_instance_) {
    delete lct_;
  }
}

void PbRpcPublicCommitArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPublicCommitArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPublicCommitArg_descriptor_;
}

const PbRpcPublicCommitArg& PbRpcPublicCommitArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPublicCommitArg* PbRpcPublicCommitArg::default_instance_ = NULL;

PbRpcPublicCommitArg* PbRpcPublicCommitArg::New() const {
  return new PbRpcPublicCommitArg;
}

void PbRpcPublicCommitArg::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_lct()) {
      if (lct_ != NULL) lct_->::PbPhysicalTimeSpec::Clear();
    }
  }
  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPublicCommitArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPublicCommitArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 2;
      case 2: {
        if (tag == 18) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Key;
        if (input->ExpectTag(26)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 3;
      case 3: {
        if (tag == 26) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Value;
        if (input->ExpectTag(34)) goto parse_LCT;
        break;
      }

      // optional .PbPhysicalTimeSpec LCT = 4;
      case 4: {
        if (tag == 34) {
         parse_LCT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPublicCommitArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPublicCommitArg)
  return false;
#undef DO_
}

void PbRpcPublicCommitArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(i), output);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(i), output);
  }

  // optional .PbPhysicalTimeSpec LCT = 4;
  if (has_lct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPublicCommitArg)
}

::google::protobuf::uint8* PbRpcPublicCommitArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPublicCommitArg)
  // required int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated bytes Key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->key(i), target);
  }

  // repeated bytes Value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->value(i), target);
  }

  // optional .PbPhysicalTimeSpec LCT = 4;
  if (has_lct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPublicCommitArg)
  return target;
}

int PbRpcPublicCommitArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .PbPhysicalTimeSpec LCT = 4;
    if (has_lct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lct());
    }

  }
  // repeated bytes Key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes Value = 3;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPublicCommitArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPublicCommitArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPublicCommitArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPublicCommitArg::MergeFrom(const PbRpcPublicCommitArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lct()) {
      mutable_lct()->::PbPhysicalTimeSpec::MergeFrom(from.lct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPublicCommitArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPublicCommitArg::CopyFrom(const PbRpcPublicCommitArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPublicCommitArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_lct()) {
    if (!this->lct().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPublicCommitArg::Swap(PbRpcPublicCommitArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(lct_, other->lct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPublicCommitArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPublicCommitArg_descriptor_;
  metadata.reflection = PbRpcPublicCommitArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPublicCommitResult::kSucceededFieldNumber;
const int PbRpcPublicCommitResult::kCTFieldNumber;
#endif  // !_MSC_VER

PbRpcPublicCommitResult::PbRpcPublicCommitResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPublicCommitResult)
}

void PbRpcPublicCommitResult::InitAsDefaultInstance() {
  ct_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPublicCommitResult::PbRpcPublicCommitResult(const PbRpcPublicCommitResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPublicCommitResult)
}

void PbRpcPublicCommitResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  ct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPublicCommitResult::~PbRpcPublicCommitResult() {
  // @@protoc_insertion_point(destructor:PbRpcPublicCommitResult)
  SharedDtor();
}

void PbRpcPublicCommitResult::SharedDtor() {
  if (this != default_instance_) {
    delete ct_;
  }
}

void PbRpcPublicCommitResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPublicCommitResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPublicCommitResult_descriptor_;
}

const PbRpcPublicCommitResult& PbRpcPublicCommitResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPublicCommitResult* PbRpcPublicCommitResult::default_instance_ = NULL;

PbRpcPublicCommitResult* PbRpcPublicCommitResult::New() const {
  return new PbRpcPublicCommitResult;
}

void PbRpcPublicCommitResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    succeeded_ = false;
    if (has_ct()) {
      if (ct_ != NULL) ct_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPublicCommitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPublicCommitResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CT;
        break;
      }

      // required .PbPhysicalTimeSpec CT = 2;
      case 2: {
        if (tag == 18) {
         parse_CT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPublicCommitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPublicCommitResult)
  return false;
#undef DO_
}

void PbRpcPublicCommitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ct(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPublicCommitResult)
}

::google::protobuf::uint8* PbRpcPublicCommitResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPublicCommitResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // required .PbPhysicalTimeSpec CT = 2;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ct(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPublicCommitResult)
  return target;
}

int PbRpcPublicCommitResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // required .PbPhysicalTimeSpec CT = 2;
    if (has_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ct());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPublicCommitResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPublicCommitResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPublicCommitResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPublicCommitResult::MergeFrom(const PbRpcPublicCommitResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_ct()) {
      mutable_ct()->::PbPhysicalTimeSpec::MergeFrom(from.ct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPublicCommitResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPublicCommitResult::CopyFrom(const PbRpcPublicCommitResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPublicCommitResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ct()) {
    if (!this->ct().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPublicCommitResult::Swap(PbRpcPublicCommitResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    std::swap(ct_, other->ct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPublicCommitResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPublicCommitResult_descriptor_;
  metadata.reflection = PbRpcPublicCommitResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPublicGetRemotePartitionsIdsResult::kSucceededFieldNumber;
const int PbRpcPublicGetRemotePartitionsIdsResult::kPidsFieldNumber;
#endif  // !_MSC_VER

PbRpcPublicGetRemotePartitionsIdsResult::PbRpcPublicGetRemotePartitionsIdsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPublicGetRemotePartitionsIdsResult)
}

void PbRpcPublicGetRemotePartitionsIdsResult::InitAsDefaultInstance() {
}

PbRpcPublicGetRemotePartitionsIdsResult::PbRpcPublicGetRemotePartitionsIdsResult(const PbRpcPublicGetRemotePartitionsIdsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPublicGetRemotePartitionsIdsResult)
}

void PbRpcPublicGetRemotePartitionsIdsResult::SharedCtor() {
  _cached_size_ = 0;
  succeeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPublicGetRemotePartitionsIdsResult::~PbRpcPublicGetRemotePartitionsIdsResult() {
  // @@protoc_insertion_point(destructor:PbRpcPublicGetRemotePartitionsIdsResult)
  SharedDtor();
}

void PbRpcPublicGetRemotePartitionsIdsResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcPublicGetRemotePartitionsIdsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPublicGetRemotePartitionsIdsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPublicGetRemotePartitionsIdsResult_descriptor_;
}

const PbRpcPublicGetRemotePartitionsIdsResult& PbRpcPublicGetRemotePartitionsIdsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPublicGetRemotePartitionsIdsResult* PbRpcPublicGetRemotePartitionsIdsResult::default_instance_ = NULL;

PbRpcPublicGetRemotePartitionsIdsResult* PbRpcPublicGetRemotePartitionsIdsResult::New() const {
  return new PbRpcPublicGetRemotePartitionsIdsResult;
}

void PbRpcPublicGetRemotePartitionsIdsResult::Clear() {
  succeeded_ = false;
  pids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPublicGetRemotePartitionsIdsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPublicGetRemotePartitionsIdsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        break;
      }

      // repeated int64 pids = 2;
      case 2: {
        if (tag == 16) {
         parse_pids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_pids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_pids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPublicGetRemotePartitionsIdsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPublicGetRemotePartitionsIdsResult)
  return false;
#undef DO_
}

void PbRpcPublicGetRemotePartitionsIdsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPublicGetRemotePartitionsIdsResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated int64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->pids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPublicGetRemotePartitionsIdsResult)
}

::google::protobuf::uint8* PbRpcPublicGetRemotePartitionsIdsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPublicGetRemotePartitionsIdsResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated int64 pids = 2;
  for (int i = 0; i < this->pids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->pids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPublicGetRemotePartitionsIdsResult)
  return target;
}

int PbRpcPublicGetRemotePartitionsIdsResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 pids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->pids(i));
    }
    total_size += 1 * this->pids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPublicGetRemotePartitionsIdsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPublicGetRemotePartitionsIdsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPublicGetRemotePartitionsIdsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPublicGetRemotePartitionsIdsResult::MergeFrom(const PbRpcPublicGetRemotePartitionsIdsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  pids_.MergeFrom(from.pids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPublicGetRemotePartitionsIdsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPublicGetRemotePartitionsIdsResult::CopyFrom(const PbRpcPublicGetRemotePartitionsIdsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPublicGetRemotePartitionsIdsResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcPublicGetRemotePartitionsIdsResult::Swap(PbRpcPublicGetRemotePartitionsIdsResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    pids_.Swap(&other->pids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPublicGetRemotePartitionsIdsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPublicGetRemotePartitionsIdsResult_descriptor_;
  metadata.reflection = PbRpcPublicGetRemotePartitionsIdsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcInternalTxSliceReadKeysArg::kKeyFieldNumber;
const int PbRpcInternalTxSliceReadKeysArg::kUSTFieldNumber;
const int PbRpcInternalTxSliceReadKeysArg::kIdFieldNumber;
const int PbRpcInternalTxSliceReadKeysArg::kSrcPartitionFieldNumber;
const int PbRpcInternalTxSliceReadKeysArg::kSrcDataCenterFieldNumber;
#endif  // !_MSC_VER

PbRpcInternalTxSliceReadKeysArg::PbRpcInternalTxSliceReadKeysArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcInternalTxSliceReadKeysArg)
}

void PbRpcInternalTxSliceReadKeysArg::InitAsDefaultInstance() {
  ust_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcInternalTxSliceReadKeysArg::PbRpcInternalTxSliceReadKeysArg(const PbRpcInternalTxSliceReadKeysArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcInternalTxSliceReadKeysArg)
}

void PbRpcInternalTxSliceReadKeysArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ust_ = NULL;
  id_ = GOOGLE_LONGLONG(0);
  srcpartition_ = GOOGLE_LONGLONG(0);
  srcdatacenter_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcInternalTxSliceReadKeysArg::~PbRpcInternalTxSliceReadKeysArg() {
  // @@protoc_insertion_point(destructor:PbRpcInternalTxSliceReadKeysArg)
  SharedDtor();
}

void PbRpcInternalTxSliceReadKeysArg::SharedDtor() {
  if (this != default_instance_) {
    delete ust_;
  }
}

void PbRpcInternalTxSliceReadKeysArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcInternalTxSliceReadKeysArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcInternalTxSliceReadKeysArg_descriptor_;
}

const PbRpcInternalTxSliceReadKeysArg& PbRpcInternalTxSliceReadKeysArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcInternalTxSliceReadKeysArg* PbRpcInternalTxSliceReadKeysArg::default_instance_ = NULL;

PbRpcInternalTxSliceReadKeysArg* PbRpcInternalTxSliceReadKeysArg::New() const {
  return new PbRpcInternalTxSliceReadKeysArg;
}

void PbRpcInternalTxSliceReadKeysArg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcInternalTxSliceReadKeysArg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(id_, srcdatacenter_);
    if (has_ust()) {
      if (ust_ != NULL) ust_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcInternalTxSliceReadKeysArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcInternalTxSliceReadKeysArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Key = 1;
      case 1: {
        if (tag == 10) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Key;
        if (input->ExpectTag(18)) goto parse_UST;
        break;
      }

      // optional .PbPhysicalTimeSpec UST = 2;
      case 2: {
        if (tag == 18) {
         parse_UST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcPartition;
        break;
      }

      // optional int64 srcPartition = 4;
      case 4: {
        if (tag == 32) {
         parse_srcPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcpartition_)));
          set_has_srcpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_srcDataCenter;
        break;
      }

      // optional int64 srcDataCenter = 5;
      case 5: {
        if (tag == 40) {
         parse_srcDataCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcdatacenter_)));
          set_has_srcdatacenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcInternalTxSliceReadKeysArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcInternalTxSliceReadKeysArg)
  return false;
#undef DO_
}

void PbRpcInternalTxSliceReadKeysArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcInternalTxSliceReadKeysArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(i), output);
  }

  // optional .PbPhysicalTimeSpec UST = 2;
  if (has_ust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ust(), output);
  }

  // optional int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // optional int64 srcPartition = 4;
  if (has_srcpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->srcpartition(), output);
  }

  // optional int64 srcDataCenter = 5;
  if (has_srcdatacenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->srcdatacenter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcInternalTxSliceReadKeysArg)
}

::google::protobuf::uint8* PbRpcInternalTxSliceReadKeysArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcInternalTxSliceReadKeysArg)
  // repeated bytes Key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->key(i), target);
  }

  // optional .PbPhysicalTimeSpec UST = 2;
  if (has_ust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ust(), target);
  }

  // optional int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // optional int64 srcPartition = 4;
  if (has_srcpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->srcpartition(), target);
  }

  // optional int64 srcDataCenter = 5;
  if (has_srcdatacenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->srcdatacenter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcInternalTxSliceReadKeysArg)
  return target;
}

int PbRpcInternalTxSliceReadKeysArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .PbPhysicalTimeSpec UST = 2;
    if (has_ust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ust());
    }

    // optional int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 srcPartition = 4;
    if (has_srcpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcpartition());
    }

    // optional int64 srcDataCenter = 5;
    if (has_srcdatacenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcdatacenter());
    }

  }
  // repeated bytes Key = 1;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcInternalTxSliceReadKeysArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcInternalTxSliceReadKeysArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcInternalTxSliceReadKeysArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcInternalTxSliceReadKeysArg::MergeFrom(const PbRpcInternalTxSliceReadKeysArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ust()) {
      mutable_ust()->::PbPhysicalTimeSpec::MergeFrom(from.ust());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_srcpartition()) {
      set_srcpartition(from.srcpartition());
    }
    if (from.has_srcdatacenter()) {
      set_srcdatacenter(from.srcdatacenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcInternalTxSliceReadKeysArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcInternalTxSliceReadKeysArg::CopyFrom(const PbRpcInternalTxSliceReadKeysArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcInternalTxSliceReadKeysArg::IsInitialized() const {

  if (has_ust()) {
    if (!this->ust().IsInitialized()) return false;
  }
  return true;
}

void PbRpcInternalTxSliceReadKeysArg::Swap(PbRpcInternalTxSliceReadKeysArg* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    std::swap(ust_, other->ust_);
    std::swap(id_, other->id_);
    std::swap(srcpartition_, other->srcpartition_);
    std::swap(srcdatacenter_, other->srcdatacenter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcInternalTxSliceReadKeysArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcInternalTxSliceReadKeysArg_descriptor_;
  metadata.reflection = PbRpcInternalTxSliceReadKeysArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcInternalTxSliceReadKeysResult::kSucceededFieldNumber;
const int PbRpcInternalTxSliceReadKeysResult::kValueFieldNumber;
const int PbRpcInternalTxSliceReadKeysResult::kSrcPartitionFieldNumber;
const int PbRpcInternalTxSliceReadKeysResult::kSrcDataCenterFieldNumber;
const int PbRpcInternalTxSliceReadKeysResult::kIdFieldNumber;
const int PbRpcInternalTxSliceReadKeysResult::kWaitedXactFieldNumber;
#endif  // !_MSC_VER

PbRpcInternalTxSliceReadKeysResult::PbRpcInternalTxSliceReadKeysResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcInternalTxSliceReadKeysResult)
}

void PbRpcInternalTxSliceReadKeysResult::InitAsDefaultInstance() {
}

PbRpcInternalTxSliceReadKeysResult::PbRpcInternalTxSliceReadKeysResult(const PbRpcInternalTxSliceReadKeysResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcInternalTxSliceReadKeysResult)
}

void PbRpcInternalTxSliceReadKeysResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  succeeded_ = false;
  srcpartition_ = 0;
  srcdatacenter_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  waitedxact_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcInternalTxSliceReadKeysResult::~PbRpcInternalTxSliceReadKeysResult() {
  // @@protoc_insertion_point(destructor:PbRpcInternalTxSliceReadKeysResult)
  SharedDtor();
}

void PbRpcInternalTxSliceReadKeysResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbRpcInternalTxSliceReadKeysResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcInternalTxSliceReadKeysResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcInternalTxSliceReadKeysResult_descriptor_;
}

const PbRpcInternalTxSliceReadKeysResult& PbRpcInternalTxSliceReadKeysResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcInternalTxSliceReadKeysResult* PbRpcInternalTxSliceReadKeysResult::default_instance_ = NULL;

PbRpcInternalTxSliceReadKeysResult* PbRpcInternalTxSliceReadKeysResult::New() const {
  return new PbRpcInternalTxSliceReadKeysResult;
}

void PbRpcInternalTxSliceReadKeysResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcInternalTxSliceReadKeysResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(succeeded_, srcdatacenter_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcInternalTxSliceReadKeysResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcInternalTxSliceReadKeysResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Succeeded = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &succeeded_)));
          set_has_succeeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        if (input->ExpectTag(24)) goto parse_SrcPartition;
        break;
      }

      // optional int32 SrcPartition = 3;
      case 3: {
        if (tag == 24) {
         parse_SrcPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcpartition_)));
          set_has_srcpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SrcDataCenter;
        break;
      }

      // optional int32 SrcDataCenter = 4;
      case 4: {
        if (tag == 32) {
         parse_SrcDataCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcdatacenter_)));
          set_has_srcdatacenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int64 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_waitedXact;
        break;
      }

      // optional double waitedXact = 6;
      case 6: {
        if (tag == 49) {
         parse_waitedXact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &waitedxact_)));
          set_has_waitedxact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcInternalTxSliceReadKeysResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcInternalTxSliceReadKeysResult)
  return false;
#undef DO_
}

void PbRpcInternalTxSliceReadKeysResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcInternalTxSliceReadKeysResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->succeeded(), output);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(i), output);
  }

  // optional int32 SrcPartition = 3;
  if (has_srcpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcpartition(), output);
  }

  // optional int32 SrcDataCenter = 4;
  if (has_srcdatacenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->srcdatacenter(), output);
  }

  // optional int64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->id(), output);
  }

  // optional double waitedXact = 6;
  if (has_waitedxact()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->waitedxact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcInternalTxSliceReadKeysResult)
}

::google::protobuf::uint8* PbRpcInternalTxSliceReadKeysResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcInternalTxSliceReadKeysResult)
  // required bool Succeeded = 1;
  if (has_succeeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->succeeded(), target);
  }

  // repeated bytes Value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->value(i), target);
  }

  // optional int32 SrcPartition = 3;
  if (has_srcpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcpartition(), target);
  }

  // optional int32 SrcDataCenter = 4;
  if (has_srcdatacenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->srcdatacenter(), target);
  }

  // optional int64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->id(), target);
  }

  // optional double waitedXact = 6;
  if (has_waitedxact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->waitedxact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcInternalTxSliceReadKeysResult)
  return target;
}

int PbRpcInternalTxSliceReadKeysResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Succeeded = 1;
    if (has_succeeded()) {
      total_size += 1 + 1;
    }

    // optional int32 SrcPartition = 3;
    if (has_srcpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcpartition());
    }

    // optional int32 SrcDataCenter = 4;
    if (has_srcdatacenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srcdatacenter());
    }

    // optional int64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional double waitedXact = 6;
    if (has_waitedxact()) {
      total_size += 1 + 8;
    }

  }
  // repeated bytes Value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcInternalTxSliceReadKeysResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcInternalTxSliceReadKeysResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcInternalTxSliceReadKeysResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcInternalTxSliceReadKeysResult::MergeFrom(const PbRpcInternalTxSliceReadKeysResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_succeeded()) {
      set_succeeded(from.succeeded());
    }
    if (from.has_srcpartition()) {
      set_srcpartition(from.srcpartition());
    }
    if (from.has_srcdatacenter()) {
      set_srcdatacenter(from.srcdatacenter());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_waitedxact()) {
      set_waitedxact(from.waitedxact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcInternalTxSliceReadKeysResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcInternalTxSliceReadKeysResult::CopyFrom(const PbRpcInternalTxSliceReadKeysResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcInternalTxSliceReadKeysResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PbRpcInternalTxSliceReadKeysResult::Swap(PbRpcInternalTxSliceReadKeysResult* other) {
  if (other != this) {
    std::swap(succeeded_, other->succeeded_);
    value_.Swap(&other->value_);
    std::swap(srcpartition_, other->srcpartition_);
    std::swap(srcdatacenter_, other->srcdatacenter_);
    std::swap(id_, other->id_);
    std::swap(waitedxact_, other->waitedxact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcInternalTxSliceReadKeysResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcInternalTxSliceReadKeysResult_descriptor_;
  metadata.reflection = PbRpcInternalTxSliceReadKeysResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPrepareRequestArg::kIdFieldNumber;
const int PbRpcPrepareRequestArg::kUSTFieldNumber;
const int PbRpcPrepareRequestArg::kHTFieldNumber;
const int PbRpcPrepareRequestArg::kKeyFieldNumber;
const int PbRpcPrepareRequestArg::kValueFieldNumber;
const int PbRpcPrepareRequestArg::kSrcPartitionFieldNumber;
const int PbRpcPrepareRequestArg::kSrcDataCenterFieldNumber;
#endif  // !_MSC_VER

PbRpcPrepareRequestArg::PbRpcPrepareRequestArg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPrepareRequestArg)
}

void PbRpcPrepareRequestArg::InitAsDefaultInstance() {
  ust_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  ht_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPrepareRequestArg::PbRpcPrepareRequestArg(const PbRpcPrepareRequestArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPrepareRequestArg)
}

void PbRpcPrepareRequestArg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ust_ = NULL;
  ht_ = NULL;
  srcpartition_ = GOOGLE_LONGLONG(0);
  srcdatacenter_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPrepareRequestArg::~PbRpcPrepareRequestArg() {
  // @@protoc_insertion_point(destructor:PbRpcPrepareRequestArg)
  SharedDtor();
}

void PbRpcPrepareRequestArg::SharedDtor() {
  if (this != default_instance_) {
    delete ust_;
    delete ht_;
  }
}

void PbRpcPrepareRequestArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPrepareRequestArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPrepareRequestArg_descriptor_;
}

const PbRpcPrepareRequestArg& PbRpcPrepareRequestArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPrepareRequestArg* PbRpcPrepareRequestArg::default_instance_ = NULL;

PbRpcPrepareRequestArg* PbRpcPrepareRequestArg::New() const {
  return new PbRpcPrepareRequestArg;
}

void PbRpcPrepareRequestArg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcPrepareRequestArg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(srcpartition_, srcdatacenter_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_ust()) {
      if (ust_ != NULL) ust_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_ht()) {
      if (ht_ != NULL) ht_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPrepareRequestArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPrepareRequestArg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UST;
        break;
      }

      // optional .PbPhysicalTimeSpec UST = 2;
      case 2: {
        if (tag == 18) {
         parse_UST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_HT;
        break;
      }

      // required .PbPhysicalTimeSpec HT = 3;
      case 3: {
        if (tag == 26) {
         parse_HT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ht()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Key;
        break;
      }

      // repeated bytes Key = 4;
      case 4: {
        if (tag == 34) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Key;
        if (input->ExpectTag(42)) goto parse_Value;
        break;
      }

      // repeated bytes Value = 5;
      case 5: {
        if (tag == 42) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Value;
        if (input->ExpectTag(48)) goto parse_SrcPartition;
        break;
      }

      // required int64 SrcPartition = 6;
      case 6: {
        if (tag == 48) {
         parse_SrcPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcpartition_)));
          set_has_srcpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SrcDataCenter;
        break;
      }

      // required int64 SrcDataCenter = 7;
      case 7: {
        if (tag == 56) {
         parse_SrcDataCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcdatacenter_)));
          set_has_srcdatacenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPrepareRequestArg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPrepareRequestArg)
  return false;
#undef DO_
}

void PbRpcPrepareRequestArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPrepareRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .PbPhysicalTimeSpec UST = 2;
  if (has_ust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ust(), output);
  }

  // required .PbPhysicalTimeSpec HT = 3;
  if (has_ht()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ht(), output);
  }

  // repeated bytes Key = 4;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->key(i), output);
  }

  // repeated bytes Value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->value(i), output);
  }

  // required int64 SrcPartition = 6;
  if (has_srcpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->srcpartition(), output);
  }

  // required int64 SrcDataCenter = 7;
  if (has_srcdatacenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->srcdatacenter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPrepareRequestArg)
}

::google::protobuf::uint8* PbRpcPrepareRequestArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPrepareRequestArg)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .PbPhysicalTimeSpec UST = 2;
  if (has_ust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ust(), target);
  }

  // required .PbPhysicalTimeSpec HT = 3;
  if (has_ht()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ht(), target);
  }

  // repeated bytes Key = 4;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->key(i), target);
  }

  // repeated bytes Value = 5;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->value(i), target);
  }

  // required int64 SrcPartition = 6;
  if (has_srcpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->srcpartition(), target);
  }

  // required int64 SrcDataCenter = 7;
  if (has_srcdatacenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->srcdatacenter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPrepareRequestArg)
  return target;
}

int PbRpcPrepareRequestArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .PbPhysicalTimeSpec UST = 2;
    if (has_ust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ust());
    }

    // required .PbPhysicalTimeSpec HT = 3;
    if (has_ht()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ht());
    }

    // required int64 SrcPartition = 6;
    if (has_srcpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcpartition());
    }

    // required int64 SrcDataCenter = 7;
    if (has_srcdatacenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcdatacenter());
    }

  }
  // repeated bytes Key = 4;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes Value = 5;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPrepareRequestArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPrepareRequestArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPrepareRequestArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPrepareRequestArg::MergeFrom(const PbRpcPrepareRequestArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ust()) {
      mutable_ust()->::PbPhysicalTimeSpec::MergeFrom(from.ust());
    }
    if (from.has_ht()) {
      mutable_ht()->::PbPhysicalTimeSpec::MergeFrom(from.ht());
    }
    if (from.has_srcpartition()) {
      set_srcpartition(from.srcpartition());
    }
    if (from.has_srcdatacenter()) {
      set_srcdatacenter(from.srcdatacenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPrepareRequestArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPrepareRequestArg::CopyFrom(const PbRpcPrepareRequestArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPrepareRequestArg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000065) != 0x00000065) return false;

  if (has_ust()) {
    if (!this->ust().IsInitialized()) return false;
  }
  if (has_ht()) {
    if (!this->ht().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPrepareRequestArg::Swap(PbRpcPrepareRequestArg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ust_, other->ust_);
    std::swap(ht_, other->ht_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(srcpartition_, other->srcpartition_);
    std::swap(srcdatacenter_, other->srcdatacenter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPrepareRequestArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPrepareRequestArg_descriptor_;
  metadata.reflection = PbRpcPrepareRequestArg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcPrepareRequestResult::kIdFieldNumber;
const int PbRpcPrepareRequestResult::kPTFieldNumber;
const int PbRpcPrepareRequestResult::kSrcPartitionFieldNumber;
const int PbRpcPrepareRequestResult::kSrcDataCenterFieldNumber;
const int PbRpcPrepareRequestResult::kBlockDurationFieldNumber;
#endif  // !_MSC_VER

PbRpcPrepareRequestResult::PbRpcPrepareRequestResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcPrepareRequestResult)
}

void PbRpcPrepareRequestResult::InitAsDefaultInstance() {
  pt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcPrepareRequestResult::PbRpcPrepareRequestResult(const PbRpcPrepareRequestResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcPrepareRequestResult)
}

void PbRpcPrepareRequestResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  pt_ = NULL;
  srcpartition_ = GOOGLE_LONGLONG(0);
  srcdatacenter_ = GOOGLE_LONGLONG(0);
  blockduration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcPrepareRequestResult::~PbRpcPrepareRequestResult() {
  // @@protoc_insertion_point(destructor:PbRpcPrepareRequestResult)
  SharedDtor();
}

void PbRpcPrepareRequestResult::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PbRpcPrepareRequestResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcPrepareRequestResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcPrepareRequestResult_descriptor_;
}

const PbRpcPrepareRequestResult& PbRpcPrepareRequestResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcPrepareRequestResult* PbRpcPrepareRequestResult::default_instance_ = NULL;

PbRpcPrepareRequestResult* PbRpcPrepareRequestResult::New() const {
  return new PbRpcPrepareRequestResult;
}

void PbRpcPrepareRequestResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcPrepareRequestResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(srcpartition_, blockduration_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_pt()) {
      if (pt_ != NULL) pt_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcPrepareRequestResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcPrepareRequestResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PT;
        break;
      }

      // required .PbPhysicalTimeSpec PT = 2;
      case 2: {
        if (tag == 18) {
         parse_PT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcPartition;
        break;
      }

      // required int64 srcPartition = 3;
      case 3: {
        if (tag == 24) {
         parse_srcPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcpartition_)));
          set_has_srcpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcDataCenter;
        break;
      }

      // required int64 srcDataCenter = 4;
      case 4: {
        if (tag == 32) {
         parse_srcDataCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcdatacenter_)));
          set_has_srcdatacenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_blockDuration;
        break;
      }

      // optional double blockDuration = 5;
      case 5: {
        if (tag == 41) {
         parse_blockDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blockduration_)));
          set_has_blockduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcPrepareRequestResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcPrepareRequestResult)
  return false;
#undef DO_
}

void PbRpcPrepareRequestResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcPrepareRequestResult)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required int64 srcPartition = 3;
  if (has_srcpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->srcpartition(), output);
  }

  // required int64 srcDataCenter = 4;
  if (has_srcdatacenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->srcdatacenter(), output);
  }

  // optional double blockDuration = 5;
  if (has_blockduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->blockduration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcPrepareRequestResult)
}

::google::protobuf::uint8* PbRpcPrepareRequestResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcPrepareRequestResult)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required int64 srcPartition = 3;
  if (has_srcpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->srcpartition(), target);
  }

  // required int64 srcDataCenter = 4;
  if (has_srcdatacenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->srcdatacenter(), target);
  }

  // optional double blockDuration = 5;
  if (has_blockduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->blockduration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcPrepareRequestResult)
  return target;
}

int PbRpcPrepareRequestResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .PbPhysicalTimeSpec PT = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required int64 srcPartition = 3;
    if (has_srcpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcpartition());
    }

    // required int64 srcDataCenter = 4;
    if (has_srcdatacenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcdatacenter());
    }

    // optional double blockDuration = 5;
    if (has_blockduration()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcPrepareRequestResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcPrepareRequestResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcPrepareRequestResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcPrepareRequestResult::MergeFrom(const PbRpcPrepareRequestResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pt()) {
      mutable_pt()->::PbPhysicalTimeSpec::MergeFrom(from.pt());
    }
    if (from.has_srcpartition()) {
      set_srcpartition(from.srcpartition());
    }
    if (from.has_srcdatacenter()) {
      set_srcdatacenter(from.srcdatacenter());
    }
    if (from.has_blockduration()) {
      set_blockduration(from.blockduration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcPrepareRequestResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcPrepareRequestResult::CopyFrom(const PbRpcPrepareRequestResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcPrepareRequestResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pt()) {
    if (!this->pt().IsInitialized()) return false;
  }
  return true;
}

void PbRpcPrepareRequestResult::Swap(PbRpcPrepareRequestResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pt_, other->pt_);
    std::swap(srcpartition_, other->srcpartition_);
    std::swap(srcdatacenter_, other->srcdatacenter_);
    std::swap(blockduration_, other->blockduration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcPrepareRequestResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcPrepareRequestResult_descriptor_;
  metadata.reflection = PbRpcPrepareRequestResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcInternalPrepareReplyResult::kIdFieldNumber;
const int PbRpcInternalPrepareReplyResult::kPTFieldNumber;
const int PbRpcInternalPrepareReplyResult::kSrcPartitionFieldNumber;
const int PbRpcInternalPrepareReplyResult::kSrcDataCenterFieldNumber;
const int PbRpcInternalPrepareReplyResult::kBlockDurationFieldNumber;
#endif  // !_MSC_VER

PbRpcInternalPrepareReplyResult::PbRpcInternalPrepareReplyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcInternalPrepareReplyResult)
}

void PbRpcInternalPrepareReplyResult::InitAsDefaultInstance() {
  pt_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcInternalPrepareReplyResult::PbRpcInternalPrepareReplyResult(const PbRpcInternalPrepareReplyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcInternalPrepareReplyResult)
}

void PbRpcInternalPrepareReplyResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  pt_ = NULL;
  srcpartition_ = GOOGLE_LONGLONG(0);
  srcdatacenter_ = GOOGLE_LONGLONG(0);
  blockduration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcInternalPrepareReplyResult::~PbRpcInternalPrepareReplyResult() {
  // @@protoc_insertion_point(destructor:PbRpcInternalPrepareReplyResult)
  SharedDtor();
}

void PbRpcInternalPrepareReplyResult::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void PbRpcInternalPrepareReplyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcInternalPrepareReplyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcInternalPrepareReplyResult_descriptor_;
}

const PbRpcInternalPrepareReplyResult& PbRpcInternalPrepareReplyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcInternalPrepareReplyResult* PbRpcInternalPrepareReplyResult::default_instance_ = NULL;

PbRpcInternalPrepareReplyResult* PbRpcInternalPrepareReplyResult::New() const {
  return new PbRpcInternalPrepareReplyResult;
}

void PbRpcInternalPrepareReplyResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbRpcInternalPrepareReplyResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(srcpartition_, blockduration_);
    id_ = GOOGLE_LONGLONG(0);
    if (has_pt()) {
      if (pt_ != NULL) pt_->::PbPhysicalTimeSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcInternalPrepareReplyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcInternalPrepareReplyResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PT;
        break;
      }

      // required .PbPhysicalTimeSpec PT = 2;
      case 2: {
        if (tag == 18) {
         parse_PT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcPartition;
        break;
      }

      // required int64 srcPartition = 3;
      case 3: {
        if (tag == 24) {
         parse_srcPartition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcpartition_)));
          set_has_srcpartition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srcDataCenter;
        break;
      }

      // required int64 srcDataCenter = 4;
      case 4: {
        if (tag == 32) {
         parse_srcDataCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcdatacenter_)));
          set_has_srcdatacenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_blockDuration;
        break;
      }

      // optional double blockDuration = 5;
      case 5: {
        if (tag == 41) {
         parse_blockDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blockduration_)));
          set_has_blockduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcInternalPrepareReplyResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcInternalPrepareReplyResult)
  return false;
#undef DO_
}

void PbRpcInternalPrepareReplyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcInternalPrepareReplyResult)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // required int64 srcPartition = 3;
  if (has_srcpartition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->srcpartition(), output);
  }

  // required int64 srcDataCenter = 4;
  if (has_srcdatacenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->srcdatacenter(), output);
  }

  // optional double blockDuration = 5;
  if (has_blockduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->blockduration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcInternalPrepareReplyResult)
}

::google::protobuf::uint8* PbRpcInternalPrepareReplyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcInternalPrepareReplyResult)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .PbPhysicalTimeSpec PT = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // required int64 srcPartition = 3;
  if (has_srcpartition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->srcpartition(), target);
  }

  // required int64 srcDataCenter = 4;
  if (has_srcdatacenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->srcdatacenter(), target);
  }

  // optional double blockDuration = 5;
  if (has_blockduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->blockduration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcInternalPrepareReplyResult)
  return target;
}

int PbRpcInternalPrepareReplyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .PbPhysicalTimeSpec PT = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // required int64 srcPartition = 3;
    if (has_srcpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcpartition());
    }

    // required int64 srcDataCenter = 4;
    if (has_srcdatacenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcdatacenter());
    }

    // optional double blockDuration = 5;
    if (has_blockduration()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcInternalPrepareReplyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcInternalPrepareReplyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcInternalPrepareReplyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcInternalPrepareReplyResult::MergeFrom(const PbRpcInternalPrepareReplyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pt()) {
      mutable_pt()->::PbPhysicalTimeSpec::MergeFrom(from.pt());
    }
    if (from.has_srcpartition()) {
      set_srcpartition(from.srcpartition());
    }
    if (from.has_srcdatacenter()) {
      set_srcdatacenter(from.srcdatacenter());
    }
    if (from.has_blockduration()) {
      set_blockduration(from.blockduration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcInternalPrepareReplyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcInternalPrepareReplyResult::CopyFrom(const PbRpcInternalPrepareReplyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcInternalPrepareReplyResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pt()) {
    if (!this->pt().IsInitialized()) return false;
  }
  return true;
}

void PbRpcInternalPrepareReplyResult::Swap(PbRpcInternalPrepareReplyResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pt_, other->pt_);
    std::swap(srcpartition_, other->srcpartition_);
    std::swap(srcdatacenter_, other->srcdatacenter_);
    std::swap(blockduration_, other->blockduration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcInternalPrepareReplyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcInternalPrepareReplyResult_descriptor_;
  metadata.reflection = PbRpcInternalPrepareReplyResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcGST::kGSTFieldNumber;
#endif  // !_MSC_VER

PbRpcGST::PbRpcGST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcGST)
}

void PbRpcGST::InitAsDefaultInstance() {
  gst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcGST::PbRpcGST(const PbRpcGST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcGST)
}

void PbRpcGST::SharedCtor() {
  _cached_size_ = 0;
  gst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcGST::~PbRpcGST() {
  // @@protoc_insertion_point(destructor:PbRpcGST)
  SharedDtor();
}

void PbRpcGST::SharedDtor() {
  if (this != default_instance_) {
    delete gst_;
  }
}

void PbRpcGST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcGST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcGST_descriptor_;
}

const PbRpcGST& PbRpcGST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcGST* PbRpcGST::default_instance_ = NULL;

PbRpcGST* PbRpcGST::New() const {
  return new PbRpcGST;
}

void PbRpcGST::Clear() {
  if (has_gst()) {
    if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcGST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcGST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec GST = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcGST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcGST)
  return false;
#undef DO_
}

void PbRpcGST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcGST)
  // required .PbPhysicalTimeSpec GST = 1;
  if (has_gst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcGST)
}

::google::protobuf::uint8* PbRpcGST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcGST)
  // required .PbPhysicalTimeSpec GST = 1;
  if (has_gst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcGST)
  return target;
}

int PbRpcGST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec GST = 1;
    if (has_gst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcGST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcGST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcGST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcGST::MergeFrom(const PbRpcGST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gst()) {
      mutable_gst()->::PbPhysicalTimeSpec::MergeFrom(from.gst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcGST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcGST::CopyFrom(const PbRpcGST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcGST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gst()) {
    if (!this->gst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcGST::Swap(PbRpcGST* other) {
  if (other != this) {
    std::swap(gst_, other->gst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcGST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcGST_descriptor_;
  metadata.reflection = PbRpcGST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcLST::kRoundFieldNumber;
const int PbRpcLST::kLSTFieldNumber;
#endif  // !_MSC_VER

PbRpcLST::PbRpcLST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcLST)
}

void PbRpcLST::InitAsDefaultInstance() {
  lst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcLST::PbRpcLST(const PbRpcLST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcLST)
}

void PbRpcLST::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0;
  lst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcLST::~PbRpcLST() {
  // @@protoc_insertion_point(destructor:PbRpcLST)
  SharedDtor();
}

void PbRpcLST::SharedDtor() {
  if (this != default_instance_) {
    delete lst_;
  }
}

void PbRpcLST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcLST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcLST_descriptor_;
}

const PbRpcLST& PbRpcLST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcLST* PbRpcLST::default_instance_ = NULL;

PbRpcLST* PbRpcLST::New() const {
  return new PbRpcLST;
}

void PbRpcLST::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    round_ = 0;
    if (has_lst()) {
      if (lst_ != NULL) lst_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcLST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcLST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LST;
        break;
      }

      // required .PbPhysicalTimeSpec LST = 2;
      case 2: {
        if (tag == 18) {
         parse_LST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcLST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcLST)
  return false;
#undef DO_
}

void PbRpcLST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcLST)
  // required int32 Round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcLST)
}

::google::protobuf::uint8* PbRpcLST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcLST)
  // required int32 Round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->round(), target);
  }

  // required .PbPhysicalTimeSpec LST = 2;
  if (has_lst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcLST)
  return target;
}

int PbRpcLST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // required .PbPhysicalTimeSpec LST = 2;
    if (has_lst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcLST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcLST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcLST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcLST::MergeFrom(const PbRpcLST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_lst()) {
      mutable_lst()->::PbPhysicalTimeSpec::MergeFrom(from.lst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcLST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcLST::CopyFrom(const PbRpcLST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcLST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_lst()) {
    if (!this->lst().IsInitialized()) return false;
  }
  return true;
}

void PbRpcLST::Swap(PbRpcLST* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(lst_, other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcLST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcLST_descriptor_;
  metadata.reflection = PbRpcLST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbRpcGSTandUST::kGSTFieldNumber;
const int PbRpcGSTandUST::kUSTFieldNumber;
#endif  // !_MSC_VER

PbRpcGSTandUST::PbRpcGSTandUST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbRpcGSTandUST)
}

void PbRpcGSTandUST::InitAsDefaultInstance() {
  gst_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
  ust_ = const_cast< ::PbPhysicalTimeSpec*>(&::PbPhysicalTimeSpec::default_instance());
}

PbRpcGSTandUST::PbRpcGSTandUST(const PbRpcGSTandUST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbRpcGSTandUST)
}

void PbRpcGSTandUST::SharedCtor() {
  _cached_size_ = 0;
  gst_ = NULL;
  ust_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRpcGSTandUST::~PbRpcGSTandUST() {
  // @@protoc_insertion_point(destructor:PbRpcGSTandUST)
  SharedDtor();
}

void PbRpcGSTandUST::SharedDtor() {
  if (this != default_instance_) {
    delete gst_;
    delete ust_;
  }
}

void PbRpcGSTandUST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRpcGSTandUST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRpcGSTandUST_descriptor_;
}

const PbRpcGSTandUST& PbRpcGSTandUST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tx_5fmessages_2eproto();
  return *default_instance_;
}

PbRpcGSTandUST* PbRpcGSTandUST::default_instance_ = NULL;

PbRpcGSTandUST* PbRpcGSTandUST::New() const {
  return new PbRpcGSTandUST;
}

void PbRpcGSTandUST::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gst()) {
      if (gst_ != NULL) gst_->::PbPhysicalTimeSpec::Clear();
    }
    if (has_ust()) {
      if (ust_ != NULL) ust_->::PbPhysicalTimeSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRpcGSTandUST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbRpcGSTandUST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PbPhysicalTimeSpec GST = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UST;
        break;
      }

      // required .PbPhysicalTimeSpec UST = 2;
      case 2: {
        if (tag == 18) {
         parse_UST:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbRpcGSTandUST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbRpcGSTandUST)
  return false;
#undef DO_
}

void PbRpcGSTandUST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbRpcGSTandUST)
  // required .PbPhysicalTimeSpec GST = 1;
  if (has_gst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gst(), output);
  }

  // required .PbPhysicalTimeSpec UST = 2;
  if (has_ust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbRpcGSTandUST)
}

::google::protobuf::uint8* PbRpcGSTandUST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbRpcGSTandUST)
  // required .PbPhysicalTimeSpec GST = 1;
  if (has_gst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gst(), target);
  }

  // required .PbPhysicalTimeSpec UST = 2;
  if (has_ust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbRpcGSTandUST)
  return target;
}

int PbRpcGSTandUST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PbPhysicalTimeSpec GST = 1;
    if (has_gst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gst());
    }

    // required .PbPhysicalTimeSpec UST = 2;
    if (has_ust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ust());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRpcGSTandUST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRpcGSTandUST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRpcGSTandUST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRpcGSTandUST::MergeFrom(const PbRpcGSTandUST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gst()) {
      mutable_gst()->::PbPhysicalTimeSpec::MergeFrom(from.gst());
    }
    if (from.has_ust()) {
      mutable_ust()->::PbPhysicalTimeSpec::MergeFrom(from.ust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRpcGSTandUST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRpcGSTandUST::CopyFrom(const PbRpcGSTandUST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRpcGSTandUST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_gst()) {
    if (!this->gst().IsInitialized()) return false;
  }
  if (has_ust()) {
    if (!this->ust().IsInitialized()) return false;
  }
  return true;
}

void PbRpcGSTandUST::Swap(PbRpcGSTandUST* other) {
  if (other != this) {
    std::swap(gst_, other->gst_);
    std::swap(ust_, other->ust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRpcGSTandUST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRpcGSTandUST_descriptor_;
  metadata.reflection = PbRpcGSTandUST_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
